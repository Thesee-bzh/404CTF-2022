# pydisasm version 6.0.4
# Python bytecode 3.10.0 (3439)
# Disassembled from Python 3.10.4 (main, Mar 24 2022, 13:07:27) [GCC 11.2.0]
# Timestamp in code: 1652008663 (2022-05-08 13:17:43)
# Source code size mod 2**32: 507 bytes
# Method Name:       <module>
# Filename:          /tmp/chall.py
# Argument count:    0
# Position-only argument count: 0
# Keyword-only arguments: 0
# Number of locals:  0
# Stack size:        3
# Flags:             0x00000040 (NOFREE)
# First Line:        1
# Constants:
#    0: <code object <listcomp> at 0x7f702d4e5e70, file "/tmp/chall.py", line 3>
#    1: '<listcomp>'
#    2: 'Password:'
#    3: 'd1j#H(&Ja1_2 61fG&'
#    4: <code object code at 0x7f702d4e5f20, file "/tmp/chall.py", line 7>
#    5: 'code'
#    6: (292, 194, 347, 382, 453, 276, 577, 434, 183, 295, 318, 196, 482, 325, 412, 502, 396, 402, 328, 194, 473, 490, 299, 503, 386, 215, 263, 211, 318, 206, 533)
#    7: 'Bravo!'
#    8: 'Dommage...'
#    9: None
# Names:
#    0: input
#    1: userInput
#    2: key
#    3: code
#    4: print
  3:           0 LOAD_CONST           (<code object <listcomp> at 0x7f702d4e5e70, file "/tmp/chall.py", line 3>)
               2 LOAD_CONST           ('<listcomp>')
               4 MAKE_FUNCTION        (Neither defaults, keyword-only args, annotations, nor closures)
               6 LOAD_NAME            (input)
               8 LOAD_CONST           ('Password:')
              10 CALL_FUNCTION        1
              12 GET_ITER
              14 CALL_FUNCTION        1
              16 STORE_NAME           (userInput)

  4:          18 LOAD_CONST           ('d1j#H(&Ja1_2 61fG&')
              20 STORE_NAME           (key)

  7:          22 LOAD_CONST           (<code object code at 0x7f702d4e5f20, file "/tmp/chall.py", line 7>)
              24 LOAD_CONST           ('code')
              26 MAKE_FUNCTION        (Neither defaults, keyword-only args, annotations, nor closures)
              28 STORE_NAME           (code)

 14:          30 LOAD_NAME            (code)
              32 LOAD_NAME            (userInput)
              34 CALL_FUNCTION        1
              36 BUILD_LIST           0
              38 LOAD_CONST           ((292, 194, 347, 382, 453, 276, 577, 434, 183, 295, 318, 196, 482, 325, 412, 502, 396, 402, 328, 194, 473, 490, 299, 503, 386, 215, 263, 211, 318, 206, 533))
              40 LIST_EXTEND          1
              42 COMPARE_OP           (==)
              44 POP_JUMP_IF_FALSE    (to 58)

 15:          46 LOAD_NAME            (print)
              48 LOAD_CONST           ('Bravo!')
              50 CALL_FUNCTION        1
              52 POP_TOP
              54 LOAD_CONST           (None)
              56 RETURN_VALUE

 17:     >>   58 LOAD_NAME            (print)
              60 LOAD_CONST           ('Dommage...')
              62 CALL_FUNCTION        1
              64 POP_TOP
              66 LOAD_CONST           (None)
              68 RETURN_VALUE


# Method Name:       <listcomp>
# Filename:          /tmp/chall.py
# Argument count:    1
# Position-only argument count: 0
# Keyword-only arguments: 0
# Number of locals:  2
# Stack size:        4
# Flags:             0x00000043 (NOFREE | NEWLOCALS | OPTIMIZED)
# First Line:        3
# Names:
#    0: ord
# Varnames:
#	.0, e
# Positional arguments:
#	.0
# Local variables:
#    1: e
  3:           0 BUILD_LIST           0
               2 LOAD_FAST            (.0)
         >>    4 FOR_ITER             (to 18)
               6 STORE_FAST           (e)
               8 LOAD_GLOBAL          (ord)
              10 LOAD_FAST            (e)
              12 CALL_FUNCTION        1
              14 LIST_APPEND          2
              16 JUMP_ABSOLUTE        (to 4)
         >>   18 RETURN_VALUE


# Method Name:       code
# Filename:          /tmp/chall.py
# Argument count:    1
# Position-only argument count: 0
# Keyword-only arguments: 0
# Number of locals:  3
# Stack size:        6
# Flags:             0x00000043 (NOFREE | NEWLOCALS | OPTIMIZED)
# First Line:        7
# Constants:
#    0: None
#    1: 1
#    2: 5
#    3: 0
# Names:
#    0: ord
#    1: key
#    2: len
#    3: code
# Varnames:
#	l, el, rest
# Positional arguments:
#	l
# Local variables:
#    1: el
#    2: rest
  8:           0 LOAD_FAST            (l)

  9:           2 DUP_TOP
               4 MATCH_SEQUENCE
               6 POP_JUMP_IF_FALSE    (to 66)
               8 GET_LEN
              10 LOAD_CONST           (1)
              12 COMPARE_OP           (>=)
              14 POP_JUMP_IF_FALSE    (to 66)
              16 UNPACK_EX            1
              18 STORE_FAST           (el)
              20 STORE_FAST           (rest)
              22 POP_TOP

 10:          24 LOAD_CONST           (5)
              26 LOAD_FAST            (el)
              28 BINARY_MULTIPLY
              30 LOAD_GLOBAL          (ord)
              32 LOAD_GLOBAL          (key)
              34 LOAD_GLOBAL          (len)
              36 LOAD_FAST            (rest)
              38 CALL_FUNCTION        1
              40 LOAD_GLOBAL          (len)
              42 LOAD_GLOBAL          (key)
              44 CALL_FUNCTION        1
              46 BINARY_MODULO
              48 BINARY_SUBSCR
              50 CALL_FUNCTION        1
              52 BINARY_XOR
              54 BUILD_LIST           1
              56 LOAD_GLOBAL          (code)
              58 LOAD_FAST            (rest)
              60 CALL_FUNCTION        1
              62 BINARY_ADD
              64 RETURN_VALUE

  9:     >>   66 POP_TOP

 11:          68 MATCH_SEQUENCE
              70 POP_JUMP_IF_FALSE    (to 86)
              72 GET_LEN
              74 LOAD_CONST           (0)
              76 COMPARE_OP           (==)
              78 POP_JUMP_IF_FALSE    (to 86)
              80 POP_TOP

 12:          82 BUILD_LIST           0
              84 RETURN_VALUE

 11:     >>   86 POP_TOP
              88 LOAD_CONST           (None)
              90 RETURN_VALUE

